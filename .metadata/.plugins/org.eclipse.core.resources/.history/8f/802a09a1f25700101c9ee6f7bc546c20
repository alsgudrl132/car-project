/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * File Name          : freertos.c
 * Description        : Code for freertos applications
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "delay_us.h"
#include "motor.h"
#include "ultra_sonic.h"
#include "usart.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */
volatile uint8_t btData = 0;
volatile uint16_t speedVal;
volatile uint16_t IC_Value1;
volatile uint16_t IC_Value2;
volatile uint16_t echoTime;
volatile uint8_t captureFlag;
volatile uint8_t distance;
/* USER CODE END Variables */
/* Definitions for HC_TASK */
osThreadId_t HC_TASKHandle;
const osThreadAttr_t HC_TASK_attributes = {
		.name = "HC_TASK",
		.stack_size = 128 * 4,
		.priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for MOTOR_TASK */
osThreadId_t MOTOR_TASKHandle;
const osThreadAttr_t MOTOR_TASK_attributes = {
		.name = "MOTOR_TASK",
		.stack_size = 128 * 4,
		.priority = (osPriority_t) osPriorityNormal,
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void HC_TASK_F(void *argument);
void MOTOR_TASK_F(void *argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of HC_TASK */
	HC_TASKHandle = osThreadNew(HC_TASK_F, NULL, &HC_TASK_attributes);

	/* creation of MOTOR_TASK */
	MOTOR_TASKHandle = osThreadNew(MOTOR_TASK_F, NULL, &MOTOR_TASK_attributes);

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}

/* USER CODE BEGIN Header_HC_TASK_F */
/**
 * @brief  Function implementing the HC_TASK thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_HC_TASK_F */
void HC_TASK_F(void *argument)
{
	/* USER CODE BEGIN HC_TASK_F */
	/* Infinite loop */
	for(;;)
	{
		//		char buffer[50];
		//
		//		HCSR04_TRIG();
		//
		//		// 거리 측정 결과를 UART로 전송
		//		//		sprintf(buffer, "%d cm\r\n", distance);
		//		//		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
		//		//		osDelay(10);
		//
		//		if(distance <= 50)
		//		{
		//			sHandler();  // 무조건 후진 우선
		//			osDelay(100);
		//			continue;    // 나머지 명령 무시
		//		}
	}
	/* USER CODE END HC_TASK_F */
}

/* USER CODE BEGIN Header_MOTOR_TASK_F */
/**
 * @brief Function implementing the MOTOR_TASK thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MOTOR_TASK_F */
void MOTOR_TASK_F(void *argument)
{
	/* USER CODE BEGIN MOTOR_TASK_F */
	/* Infinite loop */
	for(;;)
	{

		HCSR04_TRIG();
		if(distance <= 50)
		{
			sHandler();           // 후진
			osDelay(500);         // 0.5초간 후진
			stopHandler();        // 잠깐 멈추기
			osDelay(200);         // 0.2초 멈춤
			continue;             // btData 처리하지 않고 다음 루프
		}

		if (btData != 0)
		{
			if (btData >= '0' && btData <= '9')
			{
				speedVal = ((btData - '0') * 70) + 300;
				TIM3->CCR1 = speedVal;
				TIM3->CCR2 = speedVal;
			}

			if (btData == 'S') stopHandler();
			else if (btData == 'F') wHandler();
			else if (btData == 'B') sHandler();
			else if (btData == 'R') dHandler();
			else if (btData == 'L') aHandler();

			btData = 0;
			osDelay(10);
		}


	}
	/* USER CODE END MOTOR_TASK_F */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* USER CODE END Application */

