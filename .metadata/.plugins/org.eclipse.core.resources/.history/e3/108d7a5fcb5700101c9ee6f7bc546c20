/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */
volatile uint8_t btData = 0;
/* USER CODE END Variables */
/* Definitions for BLUETOOTH_HANDL */
osThreadId_t BLUETOOTH_HANDLHandle;
const osThreadAttr_t BLUETOOTH_HANDL_attributes = {
  .name = "BLUETOOTH_HANDL",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for MOTOR_CONTROL_T */
osThreadId_t MOTOR_CONTROL_THandle;
const osThreadAttr_t MOTOR_CONTROL_T_attributes = {
  .name = "MOTOR_CONTROL_T",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void BLUETOOTH_HANDLER_TASK(void *argument);
void MOTOR_CONTROL_TASK(void *argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BLUETOOTH_HANDL */
  BLUETOOTH_HANDLHandle = osThreadNew(BLUETOOTH_HANDLER_TASK, NULL, &BLUETOOTH_HANDL_attributes);

  /* creation of MOTOR_CONTROL_T */
  MOTOR_CONTROL_THandle = osThreadNew(MOTOR_CONTROL_TASK, NULL, &MOTOR_CONTROL_T_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}

/* USER CODE BEGIN Header_BLUETOOTH_HANDLER_TASK */
/**
  * @brief  Function implementing the BLUETOOTH_HANDL thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_BLUETOOTH_HANDLER_TASK */
void BLUETOOTH_HANDLER_TASK(void *argument)
{
  /* USER CODE BEGIN BLUETOOTH_HANDLER_TASK */
  /* Infinite loop */
  for(;;)
  {

  }
  /* USER CODE END BLUETOOTH_HANDLER_TASK */
}

/* USER CODE BEGIN Header_MOTOR_CONTROL_TASK */
/**
* @brief Function implementing the MOTOR_CONTROL_T thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MOTOR_CONTROL_TASK */
void MOTOR_CONTROL_TASK(void *argument)
{
  /* USER CODE BEGIN MOTOR_CONTROL_TASK */
  /* Infinite loop */
  for(;;)
  {
	  if(btData != 0)
	  {
		  if(rxData >= 48 && rxData <= 57)
		  	{
		  		speedVal = ((rxData - 47)  * 70) + 300;
		  		TIM3->CCR1 = speedVal;
		  		TIM3->CCR2 = speedVal;
		  	}
		  if(btData==83)
		  	  {
		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_RESET);
		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_RESET);
		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
		  	  }
		  	  else if(btData==70)
		  	  {
		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_RESET);
		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_SET);
		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
		  	  }
		  	  else if (btData==66)
		  	  {
		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_RESET);
		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_SET);
		  	  }
		  	  else if (btData==82)
		  	  {
		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_RESET);
		  	  }
		  	  else if (btData==76)
		  	  {
		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
		  	  }
	  }

	  osDelay(1);
  }
  /* USER CODE END MOTOR_CONTROL_TASK */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* USER CODE END Application */

