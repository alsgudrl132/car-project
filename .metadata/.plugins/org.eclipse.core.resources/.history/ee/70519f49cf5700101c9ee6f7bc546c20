/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * File Name          : freertos.c
 * Description        : Code for freertos applications
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */
volatile uint8_t btData = 0;
volatile uint16_t speedVal;
/* USER CODE END Variables */
/* Definitions for SPEED_TASK */
osThreadId_t SPEED_TASKHandle;
const osThreadAttr_t SPEED_TASK_attributes = {
		.name = "SPEED_TASK",
		.stack_size = 128 * 4,
		.priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for MOTOR_TASK */
osThreadId_t MOTOR_TASKHandle;
const osThreadAttr_t MOTOR_TASK_attributes = {
		.name = "MOTOR_TASK",
		.stack_size = 128 * 4,
		.priority = (osPriority_t) osPriorityNormal,
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void SPEED_TASK_F(void *argument);
void MOTOR_TASK_F(void *argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of SPEED_TASK */
	SPEED_TASKHandle = osThreadNew(SPEED_TASK_F, NULL, &SPEED_TASK_attributes);

	/* creation of MOTOR_TASK */
	MOTOR_TASKHandle = osThreadNew(MOTOR_TASK_F, NULL, &MOTOR_TASK_attributes);

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}

/* USER CODE BEGIN Header_SPEED_TASK_F */
/**
 * @brief  Function implementing the SPEED_TASK thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_SPEED_TASK_F */
void SPEED_TASK_F(void *argument)
{
	/* USER CODE BEGIN SPEED_TASK_F */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
	}
	/* USER CODE END SPEED_TASK_F */
}

/* USER CODE BEGIN Header_MOTOR_TASK_F */
/**
 * @brief Function implementing the MOTOR_TASK thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_MOTOR_TASK_F */
void MOTOR_TASK_F(void *argument)
{
	/* USER CODE BEGIN MOTOR_TASK_F */
	/* Infinite loop */
	for(;;)
	{
		if (btData != 0) // 새로운 명령이 있을 때만 처리
			if (btData >= '0' && btData <= '9')
			{
				speedVal = ((btData - '0') * 70) + 300; // '0'을 빼서 실제 숫자 값으로 변환
				TIM3->CCR1 = speedVal;
				TIM3->CCR2 = speedVal;
			}
		// 방향 제어 (문자 'S', 'F', 'B', 'R', 'L'에 해당하는 ASCII 값)
			else if (btData == 'S') // Stop (ASCII 83)
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_RESET);
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_RESET);
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
			}
			else if (btData == 'F') // Forward (ASCII 70)
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_RESET);
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_SET);
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
			}
			else if (btData == 'B') // Backward (ASCII 66)
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_RESET);
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_SET);
			}
			else if (btData == 'R') // Right (ASCII 82)
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);  // 왼쪽 모터 전진
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_RESET);
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_RESET); // 오른쪽 모터 정지 또는 후진
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
			}
			else if (btData == 'L') // Left (ASCII 76)
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // 왼쪽 모터 정지 또는 후진
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_RESET);
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_SET);  // 오른쪽 모터 전진
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  GPIO_PIN_RESET);
			}

		// 명령 처리 완료 후 btData를 0으로 초기화 (매우 중요!)
		btData = 0;

		osDelay(10); // 10ms 주기로 태스크 실행 (CPU 양보)


	}
	/* USER CODE END MOTOR_TASK_F */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* USER CODE END Application */

